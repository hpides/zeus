package de.hpi.des.hdes.benchmark.nexmark;

/*
   NEXMark Generator -- Niagara Extension to XMark Data Generator

   Acknowledgements:
   The NEXMark Generator was developed using the xmlgen generator 
   from the XMark Benchmark project as a basis. The NEXMark
   generator generates streams of auction elements (bids, items
   for auctions, persons) as opposed to the auction files
   generated by xmlgen.  xmlgen was developed by Florian Waas.
   See http://www.xml-benchmark.org for information.

   Copyright (c) Dept. of  Computer Science & Engineering,
   OGI School of Science & Engineering, OHSU. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies
   of the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
   AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
   AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
   WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

   This software was developed with support from NSF ITR award
   IIS0086002 and from DARPA through NAVY/SPAWAR 
   Contract No. N66001-99-1-8098.

*/

import java.util.Random;

class SimpleCalendar {

  private static int MAXINCREMENT_MS = 1000;
  private int time_ms = 0; // time in seconds
  private Random rnd;

  SimpleCalendar(Random rnd) {
    this.rnd = rnd;
  }

  long getTimeInSecs() {
    return time_ms / 1000;
  }

  int getTimeInMS() {
    return time_ms;
  }

  void incrementTime() {
    time_ms += rnd.nextInt(MAXINCREMENT_MS); // 1000 millesecons per second
    assert time_ms >= 0 : "time overflowed";
  }
}
