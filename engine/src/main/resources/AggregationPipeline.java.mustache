{{! 
  hash used: {
    pipelineId: string,
    tupleLength: int,
    keyType: string, // How do we support multiple keys? Object could do the trick with a custom key exctractor
    nativeKeyType: string, // same as keyType except lowercased, except for Object2Object
    keyOffset: int
    aggImplementation: String,
    shouldCountPerWindow: Bool
  }
}}
package de.hpi.des.hdes.engine.temp;

import java.nio.ByteBuffer;

import de.hpi.des.hdes.engine.execution.Dispatcher;
import de.hpi.des.hdes.engine.execution.buffer.ReadBuffer;
import de.hpi.des.hdes.engine.execution.Stoppable;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.ints.*;

public class {{{pipelineId}}} implements Runnable, Stoppable {
    final private long windowSlide = {{{windowLength}}};
    final private long windowLength = {{{windowLength}}};
    private long earliestOpenWindow = Long.MAX_VALUE;
    private long latestTimestamp = 0;
    final private ReadBuffer input;
    final private Dispatcher dispatcher;
    final private int[] offsetsToWindowCount = new int[{{{eventCount}}}];

    private final byte[] output = new byte[({{{aggregationValueType.length}}} + 8 + 1) *{{{vectorSize}}}];
    private final ByteBuffer outputBuffer = ByteBuffer.wrap(output);
    private int outputCounter = 0;

    final private Long2{{aggregationValueType.uppercaseName}}OpenHashMap windowToState = new Long2{{aggregationValueType.uppercaseName}}OpenHashMap();
    final private Long2LongOpenHashMap windowToMaxTimestamp = new Long2LongOpenHashMap();
    
    private final int[] freeableOffsets = new int[{{{vectorSize}}}];
    private int freeableIndex = 0;

    {{{#shouldCountPerWindow}}}
    final private Long2IntOpenHashMap windowToCount = new Long2IntOpenHashMap();
    {{{/shouldCountPerWindow}}}

    private boolean shutdownFlag = false;

    {{#interfaces}}
    {{> InterfaceDefinition.java.mustache}}
    {{/interfaces}}

    public {{{pipelineId}}} (final ReadBuffer input, final Dispatcher dispatcher) {
        this.input = input;
        this.dispatcher = dispatcher;
    }

    private void readEvent() {
        int startingPosition = input.getBuffer().position();
        final long eventTimestamp = input.getBuffer().getLong();
        if (eventTimestamp < latestTimestamp) {
            free(startingPosition);
            input.getBuffer().position(startingPosition+8+{{tupleLength}}+1);
            return;
        }
        LongList windowStarts = new LongArrayList();
        for (long currentWindow = eventTimestamp - (eventTimestamp % windowLength); currentWindow <= eventTimestamp; currentWindow += windowSlide) {
                windowStarts.add(currentWindow);
        }
        offsetsToWindowCount[startingPosition/(8+1{{tupleLength}})] = windowStarts.size();
        final long minWindow = windowStarts.getLong(0);
        if (earliestOpenWindow > minWindow) {
            earliestOpenWindow = minWindow;
        }        

        {{#variables}}
        {{> VariableDefiniton.java.mustache}}
        {{/variables}}

        {{{operators}}}

        for(long windowStart: windowStarts){
            final {{aggregationValueType.lowercaseName}} state = this.windowToState.computeIfAbsent(windowStart, w -> 0);
            long windowMaxTimestamp = windowToMaxTimestamp.computeIfAbsent(windowStart, w -> eventTimestamp);
            if (eventTimestamp > windowMaxTimestamp) {
                windowToMaxTimestamp.put(windowStart, eventTimestamp);
            }

            {{{#shouldCountPerWindow}}}
            final int count = this.windowToCount.computeIfAbsent(windowStart, w -> 0);
            {{{/shouldCountPerWindow}}}

            final {{aggregationValueType.lowercaseName}} current = {{{aggregationVariable}}};
            final {{aggregationValueType.lowercaseName}} newState = {{{aggregateImplementation}}};

            this.windowToState.put(windowStart, newState);

            {{{#shouldCountPerWindow}}}
            this.windowToCount.put(windowStart, count + 1);
            {{{/shouldCountPerWindow}}}
        }

        input.getBuffer().position(startingPosition + 8 + {{tupleLength}});

        if (input.getBuffer().get() == (byte) 1) {
            latestTimestamp = Math.max(latestTimestamp, eventTimestamp);
            for (; earliestOpenWindow + windowLength <= latestTimestamp && earliestOpenWindow
                    + windowLength <= latestTimestamp; earliestOpenWindow += windowSlide) {
                trigger(earliestOpenWindow);
            }
        }

        free(startingPosition);
    }

    private void trigger(long eventTimestamp) {
        int initialOutputOffset = this.outputCounter * (8 + {{aggregationValueType.length}} + 1);
        {{aggregationValueType.lowercaseName}} value = windowToState.remove(eventTimestamp);
        long maxTimestamp = windowToMaxTimestamp.remove(eventTimestamp);
        outputBuffer.putLong(initialOutputOffset, maxTimestamp)
            .put{{aggregationValueType.uppercaseName}}(initialOutputOffset + 8, value)
            .put(initialOutputOffset + 8 + {{aggregationValueType.length}}, (byte) 0);
        this.outputCounter++;
        if(this.outputCounter == {{{vectorSize}}}) {
            while (!dispatcher.write("{{pipelineId}}", output) && !shutdownFlag);
            this.outputCounter = 0;
        }
    }

     private void free(int startingPosition){
        int pos = startingPosition/(8+1+{{tupleLength}});
        int remainingWindows = offsetsToWindowCount[pos]-1;
        offsetsToWindowCount[pos] = remainingWindows;
        if(remainingWindows <= 0) {
            freeableOffsets[freeableIndex] = startingPosition;
            freeableIndex++;
            if(freeableIndex == {{{vectorSize}}}) {
                dispatcher.free(input, freeableOffsets);
                freeableIndex = 0;
        }
    }
  }

    @Override
    public void run() {
        while (!Thread.interrupted() && !shutdownFlag) {
            if (input.getBuffer().position() == input.getBuffer().capacity()) {
                dispatcher.resetReadLimit("{{pipelineId}}", input);
            }
            for (int remainingBytes=Math.min(input.remainingBytes(), {{{readVectorSize}}}*(8+{{tupleLength}}+1)); remainingBytes > 0; remainingBytes -= (8+{{tupleLength}}+1)) {
                readEvent();
            }
        }
    }

    @Override
    public void shutdown() {
        shutdownFlag = true;
    }
}
