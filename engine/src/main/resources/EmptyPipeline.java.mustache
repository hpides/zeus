package de.hpi.des.hdes.engine.temp;

import java.util.Arrays;

import de.hpi.des.hdes.engine.execution.Dispatcher;
import de.hpi.des.hdes.engine.execution.buffer.ReadBuffer;
import de.hpi.des.hdes.engine.execution.Stoppable;

import java.nio.ByteBuffer;

public class {{{className}}} implements Runnable, Stoppable {
  private final ReadBuffer input;
  private boolean shutdownFlag = false;
  private final Dispatcher dispatcher;
  private final byte[] output = new byte[{{{outputEventLength}}}*{{{vectorSize}}}];
  private final ByteBuffer outputBuffer = ByteBuffer.wrap(output);
  private int outputCounter = 0;
  private final int[] freeableOffsets = new int[{{{vectorSize}}}];
  private int freeableIndex = 0;

  {{#interfaces}}
  {{> InterfaceDefinition.java.mustache}}
  {{/interfaces}}
  
  public {{{className}}}(final ReadBuffer input, final Dispatcher dispatcher) {
    this.input = input;
    this.dispatcher = dispatcher;
  }

  public void readEvent(){
    int startingPosition = input.getBuffer().position();
    int nextPosition = startingPosition + {{inputEventLength}};
    int initialOutputOffset = outputCounter * {{{outputEventLength}}};
    outputBuffer.position(initialOutputOffset);
    {{#variables}}
    {{> VariableDefiniton.java.mustache}}
    {{/variables}}
    input.getBuffer().position(startingPosition);
    input.getBuffer().get(output, initialOutputOffset, 8);
    outputBuffer.position(outputBuffer.position()+8);
    {{{implementation}}}
    input.getBuffer().get(output, {{outputEventLength}}-1, 1);
    outputBuffer.position(outputBuffer.position()+1);
    outputCounter++;
    free(startingPosition);
    if(outputCounter == {{{vectorSize}}}) {
        while (!dispatcher.write("{{className}}", output) && !shutdownFlag); 
        outputCounter = 0;
    }
    input.getBuffer().position(nextPosition);
  }

  private void free(int startingPosition){
    freeableOffsets[freeableIndex] = startingPosition;
    freeableIndex++;
    if(freeableIndex == {{{vectorSize}}}) {
        dispatcher.free(input, freeableOffsets);
        freeableIndex = 0;
    }
  }

  @Override
    public void run() {
        System.out.println("Started EmptyPipeline ({{{className}}}) on Thread " + Thread.currentThread().getId());
        while (!Thread.interrupted() && !shutdownFlag) {
            if (input.getBuffer().position() == input.getBuffer().capacity()) {
                dispatcher.resetReadLimit("{{{className}}}", input);
            }
            for (int remainingBytes=Math.min(input.remainingBytes(), {{{readVectorSize}}}*({{{inputEventLength}}})); remainingBytes > 0 && !shutdownFlag; remainingBytes -= ({{{inputEventLength}}})) {
                readEvent();
            }
        }
        if(dispatcher.deregisterPipelineAtParent("{{{className}}}", input)) {
            int finalPosition = input.getBuffer().position();
            int freezePosition = input.getFreezePosition();
            while(finalPosition != freezePosition) {
                if (finalPosition == input.getBuffer().capacity()) {
                    finalPosition = 0;
                }
                free(finalPosition);
                finalPosition += ({{inputEventLength}});
            }
        }
        if(freeableIndex != 0) {
            dispatcher.free(input, Arrays.copyOfRange(freeableOffsets, 0, freeableIndex));
        }
        dispatcher.removeReadBuffer(input);
        dispatcher.removeBufferWrapperForPipeline("{{{className}}}");
        
    }

    @Override
    public void shutdown() {
        shutdownFlag = true;
    }
}
