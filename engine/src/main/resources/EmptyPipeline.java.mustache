package de.hpi.des.hdes.engine.temp;

import de.hpi.des.hdes.engine.execution.Dispatcher;
import de.hpi.des.hdes.engine.execution.buffer.ReadBuffer;
import de.hpi.des.hdes.engine.execution.Stoppable;

import java.nio.ByteBuffer;

public class {{{className}}} implements Runnable, Stoppable {
  private final ReadBuffer input;
  private boolean shutdownFlag = false;
  private final Dispatcher dispatcher;
  private final byte[] output = new byte[{{{outputEventLength}}}*{{{vectorSize}}}];
  private final ByteBuffer outputBuffer = ByteBuffer.wrap(output);
  private int outputCounter = 0;
  private final int[] freeableOffsets = new int[{{{vectorSize}}}];
  private int freeableIndex = 0;

  {{#interfaces}}
  {{> InterfaceDefinition.java.mustache}}
  {{/interfaces}}
  
  public {{{className}}}(final ReadBuffer input, final Dispatcher dispatcher) {
    this.input = input;
    this.dispatcher = dispatcher;
  }

  public void readEvent(){
    input.mark();
    int nextPosition = input.getBuffer().position() + {{inputEventLength}};
    int initialOutputOffset = outputCounter * {{{outputEventLength}}};
    {{#variables}}
    {{> VariableDefiniton.java.mustache}}
    {{/variables}}
    {{{implementation}}}
    outputCounter++;
    freeableOffsets[freeableIndex] = nextPosition - {{inputEventLength}};
    freeableIndex++;
    if(freeableIndex == {{{vectorSize}}}) {
        dispatcher.free(input, freeableOffsets);
        freeableIndex = 0;
    }
    if(outputCounter == {{{vectorSize}}}) {
        while (!dispatcher.write("{{className}}", output) && !shutdownFlag); 
        outputCounter = 0;
    }
    input.getBuffer().position(nextPosition);
  }

  @Override
    public void run() {
        while (!Thread.interrupted() && !shutdownFlag) {
            if (input.getBuffer().position() == input.getBuffer().capacity()) {
                dispatcher.resetReadLimit(input);
            }
            for (int remainingBytes=Math.min(input.remainingBytes(), {{{readVectorSize}}}*({{{inputEventLength}}})); remainingBytes > 0; remainingBytes -= ({{{inputEventLength}}})) {
                readEvent();
            }
        }
    }

    @Override
    public void shutdown() {
        shutdownFlag = true;
    }
}
