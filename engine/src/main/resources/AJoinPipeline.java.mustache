{{! 
  hash used: {
    pipelineId: string,
    leftTupleLength: int,
    rightTupleLength: int,
    type.uppercaseName: string, // How do we support multiple keys? Object could do the trick with a custom key exctractor
    type.lowercaseName: string, same as type.uppercaseName except lowercased, except for Object2Object
    leftKeyOffset: int
    rightKeyOffset: int,
    leftImplementation: String,
    rightImplementation: String,
  }
}}
package de.hpi.des.hdes.engine.temp;

import java.nio.ByteBuffer;

import de.hpi.des.hdes.engine.execution.Dispatcher;
import de.hpi.des.hdes.engine.execution.buffer.ReadBuffer;
import de.hpi.des.hdes.engine.execution.Stoppable;

import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.ints.*;

public class {{{pipelineId}}} implements Runnable, Stoppable {
    final private long windowSlide = {{{windowLength}}};
    final private long windowLength = {{{windowLength}}};
    private long earliestOpenWindowJoin = Long.MAX_VALUE;
    private long latestTimestampLeft = 0;
    private long latestTimestampRight = 0;
    final private int[] leftFreeableOffsets = new int[{{{vectorSize}}}];
    final private int[] rightFreeableOffsets = new int[{{{vectorSize}}}];
    private int leftFreeableIndex = 0;
    private int rightFreeableIndex = 0;
    final private Int2IntMap leftOffsetsToWindowCount = new Int2IntOpenHashMap();
    final private Int2IntMap rightOffsetsToWindowCount = new Int2IntOpenHashMap();
    final private ReadBuffer leftInput;
    final private ReadBuffer rightInput;
    final private Dispatcher dispatcher;
    final byte[] output = new byte[(8 + {{{leftTupleLength}}} + {{{rightTupleLength}}} + 1)*{{{vectorSize}}}];
    final private ByteBuffer outputBuffer = ByteBuffer.wrap(output);
    private int outputCounter = 0;

    final private Long2ObjectMap<{{type.uppercaseName}}2ObjectOpenHashMap<IntList>> leftWindowsToBuckets = new Long2ObjectOpenHashMap<>();
    final private Long2ObjectMap<{{type.uppercaseName}}2ObjectOpenHashMap<IntList>> rightWindowsToBuckets = new Long2ObjectOpenHashMap<>();
    private boolean shutdownFlag = false;

    {{#interfaces}}
    {{> InterfaceDefinition.java.mustache}}
    {{/interfaces}}

    public {{{pipelineId}}} (final ReadBuffer left, final ReadBuffer right, final Dispatcher dispatcher) {
        leftInput = left;
        rightInput = right;
        this.dispatcher = dispatcher;
    }

    public void readEventLeft() {
        final int startingPosition = leftInput.getBuffer().position();
        final long eventTimestamp = leftInput.getBuffer().getLong();
        if (eventTimestamp < latestTimestampLeft) {
            freeLeft(startingPosition);
            leftInput.getBuffer().position(startingPosition+8+{{leftTupleLength}}+1);
            return;
        }
        LongList windowStarts = new LongArrayList();
        for (long currentWindow = 0; currentWindow <= eventTimestamp; currentWindow += windowSlide) {
            if (currentWindow > eventTimestamp - windowLength)
                windowStarts.add(currentWindow);
        }
        leftOffsetsToWindowCount.put(startingPosition, windowStarts.size());
        final long minWindow = windowStarts.getLong(0);
        if (earliestOpenWindowJoin > minWindow) {
            earliestOpenWindowJoin = minWindow;
        }

        {{#leftVariables}}
        {{> VariableDefiniton.java.mustache}}
        {{/leftVariables}}

        {{{leftOperators}}}

        for(long windowStart: windowStarts){
            {{type.uppercaseName}}2ObjectOpenHashMap<IntList> bucket = leftWindowsToBuckets.computeIfAbsent(windowStart,
                    w -> new {{type.uppercaseName}}2ObjectOpenHashMap<IntList>());
            IntList set = bucket.computeIfAbsent({{{leftKey}}}, w -> new IntArrayList());
            set.add(startingPosition);
            leftInput.getBuffer().position(startingPosition + 8 + {{leftTupleLength}});
        }
        
        if (leftInput.getBuffer().get() == (byte) 1) {
            latestTimestampLeft = Math.max(latestTimestampLeft, eventTimestamp);
            for (; earliestOpenWindowJoin + windowLength <= latestTimestampLeft && earliestOpenWindowJoin
                    + windowLength <= latestTimestampRight; earliestOpenWindowJoin += windowSlide) {
                trigger(earliestOpenWindowJoin);
            }
        }
    }

    public void readEventRight() {
        final int startingPosition = rightInput.getBuffer().position();
        final long eventTimestamp = rightInput.getBuffer().getLong();
        
        if (eventTimestamp < latestTimestampRight) {
            freeRight(startingPosition);
            rightInput.getBuffer().position(startingPosition+8+{{rightTupleLength}}+1);
            return;
        }
        LongList windowStarts = new LongArrayList();
        for (long currentWindow = 0; currentWindow <= eventTimestamp; currentWindow += windowSlide) {
            if (currentWindow > eventTimestamp - windowLength)
                windowStarts.add(currentWindow);
        }
        rightOffsetsToWindowCount.put(startingPosition, windowStarts.size());
        final long minWindow = windowStarts.getLong(0);
        if (earliestOpenWindowJoin > minWindow) {
            earliestOpenWindowJoin = minWindow;
        }

        {{#rightVariables}}
        {{> VariableDefiniton.java.mustache}}
        {{/rightVariables}}

        {{{rightOperators}}}

        for(long windowStart: windowStarts){
            {{type.uppercaseName}}2ObjectOpenHashMap<IntList> bucket = rightWindowsToBuckets.computeIfAbsent(windowStart,
                    w -> new {{type.uppercaseName}}2ObjectOpenHashMap<IntList>());
            IntList set = bucket.computeIfAbsent({{{rightKey}}}, w -> new IntArrayList());
            set.add(startingPosition);
            rightInput.getBuffer().position(startingPosition + 8 + {{rightTupleLength}});
        }

        if (rightInput.getBuffer().get() == (byte) 1) {
            latestTimestampRight = Math.max(latestTimestampRight, eventTimestamp);
            for (; earliestOpenWindowJoin + windowLength <= latestTimestampLeft && earliestOpenWindowJoin
                    + windowLength <= latestTimestampRight; earliestOpenWindowJoin += windowSlide) {
                trigger(earliestOpenWindowJoin);
            }
        }
    }

    private void trigger(final long timestamp) {
        int leftPosition = leftInput.getBuffer().position();
        int rightPosition = rightInput.getBuffer().position();
        {{type.uppercaseName}}2ObjectOpenHashMap<IntList> leftBucket = leftWindowsToBuckets.remove(timestamp);
        {{type.uppercaseName}}2ObjectOpenHashMap<IntList> rightBucket = rightWindowsToBuckets.remove(timestamp);
        if(leftBucket == null && rightBucket != null) {
            for ({{type.lowercaseName}} key : rightBucket.keySet()) {
                IntList rightOffsets = rightBucket.get(key);
                for(int i = 0; i < rightOffsets.size(); i++) {
                    freeRight(rightOffsets.getInt(i));
                }
            }
            return;
        } else if(rightBucket == null && leftBucket != null) {
            for ({{type.lowercaseName}} key : leftBucket.keySet().to{{{type.uppercaseName}}}Array()) {
                IntList leftOffsets = leftBucket.get(key);
                for(int i = 0; i < leftOffsets.size(); i++) {
                    freeLeft(leftOffsets.getInt(i));
                }
            }
            return;
        } else if(leftBucket == null && rightBucket == null) {
            return;
        }
        for ({{type.lowercaseName}} key : leftBucket.keySet().to{{{type.uppercaseName}}}Array()) {
            if (rightBucket.containsKey(key)) {
                IntList leftOffsets = leftBucket.get(key);
                IntList rightOffsets = rightBucket.get(key);
                for(int leftIndex = 0; leftIndex < leftOffsets.size(); leftIndex++) {
                    int leftOffset = leftOffsets.getInt(leftIndex);
                    for(int rightIndex = 0; rightIndex < rightOffsets.size(); rightIndex++) {
                        int rightOffset = rightOffsets.getInt(rightIndex);
                        this.writeOutput(leftOffset, rightOffset);
                    }
                    freeLeft(leftOffset);
                }
                for(int rightIndex = 0; rightIndex < rightOffsets.size(); rightIndex++) {
                    freeRight(rightOffsets.getInt(rightIndex));
                }
                rightBucket.remove(key);
            } else {
                IntList leftOffsets = leftBucket.get(key);
                for(int i = 0; i < leftOffsets.size(); i++) {
                    freeLeft(leftOffsets.getInt(i));
                }
            }
        }
        for ({{type.lowercaseName}} key : rightBucket.keySet().to{{{type.uppercaseName}}}Array()) {
            IntList rightOffsets = rightBucket.get(key);
            for(int i = 0; i < rightOffsets.size(); i++) {
                freeRight(rightOffsets.getInt(i));
            }
        }
        
        leftInput.getBuffer().position(leftPosition);
        rightInput.getBuffer().position(rightPosition);
        }
    

    public void writeOutput(int leftOffset, int rightOffset) {
        int initialOutputOffset = this.outputCounter * (8 + {{leftTupleLength}} + {{rightTupleLength}} + 1);
        outputBuffer.putLong(initialOutputOffset,Math.max(leftInput.getBuffer().getLong(leftOffset),rightInput.getBuffer().getLong(rightOffset)));
        leftInput.getBuffer().position(leftOffset);
        rightInput.getBuffer().position(rightOffset);
        int startingPosition = rightOffset;
        {{#rightVariables}}
        {{> VariableDefiniton.java.mustache}}
        {{/rightVariables}}
        {{{rightOperators}}}
        startingPosition = leftOffset;
        {{#leftVariables}}
        {{> VariableDefiniton.java.mustache}}
        {{/leftVariables}}
        {{{leftOperators}}}
        {{{writeOut}}}
        outputBuffer.put(initialOutputOffset + 8 + {{leftTupleLength}} + {{rightTupleLength}}, (byte) 0);
        this.outputCounter++;
        if(this.outputCounter == {{{vectorSize}}}) {
            while (!dispatcher.write("{{pipelineId}}", output) && !shutdownFlag);
            this.outputCounter = 0;
        }
    }

    private void freeLeft(int offset) {
        int remainingWindows = leftOffsetsToWindowCount.get(offset);
        if(--remainingWindows <= 0) {
            leftFreeableOffsets[leftFreeableIndex] = offset;
            leftFreeableIndex++;
            if(leftFreeableIndex == {{{vectorSize}}}) {
                dispatcher.free(leftInput, leftFreeableOffsets);
                leftFreeableIndex = 0;
            }
        }
    }

    private void freeRight(int offset) {
        int remainingWindows = rightOffsetsToWindowCount.get(offset);
        if(--remainingWindows <= 0) {
            rightFreeableOffsets[rightFreeableIndex] = offset;
            rightFreeableIndex++;
            if(rightFreeableIndex == {{{vectorSize}}}) {
                dispatcher.free(rightInput, rightFreeableOffsets);
                rightFreeableIndex = 0;
            }
        }
    }

    @Override
    public void run() {
        while (!Thread.interrupted() && !shutdownFlag) {
            if (leftInput.getBuffer().position() == leftInput.getBuffer().capacity()) {
                dispatcher.resetReadLimit("{{{pipelineId}}}", leftInput);
            }
            if (rightInput.getBuffer().position() == rightInput.getBuffer().capacity()) {
                dispatcher.resetReadLimit("{{{pipelineId}}}", rightInput);
            }
            for (int remainingBytes=Math.min(leftInput.remainingBytes(), {{{readVectorSize}}}*(8 + {{{leftTupleLength}}} + 1)); remainingBytes > 0; remainingBytes -= (8 + {{{leftTupleLength}}} + 1)) {
                readEventLeft();
            }
            for (int remainingBytes=Math.min(rightInput.remainingBytes(), {{{readVectorSize}}}*(8 + {{{rightTupleLength}}} + 1)); remainingBytes > 0; remainingBytes -= (8 + {{{rightTupleLength}}} + 1)) {
                readEventRight();
            }
        }
    }

    @Override
    public void shutdown() {
        shutdownFlag = true;
    }
}
