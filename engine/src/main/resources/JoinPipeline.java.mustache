{{! 
  hash used: {
    pipelineId: string,
    leftTupleLength: int,
    rightTupleLength: int,
    keyType: string, // How do we support multiple keys? Object could do the trick with a custom key exctractor
    nativeKeyType: string, // same as keyType except lowercased, except for Object2Object
    leftKeyOffset: int
    rightKeyOffset: int,
    leftImplementation: String,
    rightImplementation: String,
  }
}}
package de.hpi.des.hdes.engine.temp;

import java.nio.ByteBuffer;

import de.hpi.des.hdes.engine.execution.Dispatcher;
import de.hpi.des.hdes.engine.execution.buffer.ReadBuffer;

import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.ints.*;

public class {{{pipelineId}}} implements Runnable {
    final private long windowSlide;
    final private long windowLength;
    private long earliestOpenWindowJoin = Long.MAX_VALUE;
    private long latestTimestampLeft;
    private long latestTimestampRight;
    final private ReadBuffer leftInput;
    final private ReadBuffer rightInput;
    final private ByteBuffer leftByteBuffer;
    final private ByteBuffer rightByteBuffer;
    final private Dispatcher dispatcher;
    
    final private Long2ObjectOpenHashMap<{{keyType}}Set> leftWindowToKeys = new Long2ObjectOpenHashMap<>();
    final private {{keyType}}2IntOpenHashMap leftKeyToOffset = new {{keyType}}2LongOpenHashMap();

    final private Long2ObjectOpenHashMap<{{keyType}}Set> rightWindowToKeys = new Long2ObjectOpenHashMap<>();
    final private {{keyType}}2IntOpenHashMap rightKeyToOffset = new {{keyType}}2LongOpenHashMap();

    public {{{pipelineId}}} (final ReadBuffer left, final ReadBuffer right, final Dispatcher dispatcher, final long windowLength,
            final long windowSlide) {
        leftInput = left;
        rightInput = right;
        leftByteBuffer = left.getBuffer();
        rightByteBuffer = right.getBuffer();
        this.dispatcher = dispatcher;
        this.windowLength = windowLength;
        this.windowSlide = windowSlide;
    }

    public void readEventLeft() {
        final long eventTimestamp = leftByteBuffer.getLong();
        leftByteBuffer.mark();
        if (eventTimestamp < latestTimestampLeft) {
            return;
        }
        final long windowStart = eventTimestamp - (eventTimestamp % windowLength);
        if (earliestOpenWindowJoin > windowStart) {
            earliestOpenWindowJoin = windowStart;
        }

        {{{leftImplementation}}}

        {{keyType}}Set keys = leftWindowToKeys.computeIfAbsent(windowStart, w -> new {{keyType}}Set());
        leftByteBuffer.position(leftByteBuffer.position()+{{leftKeyOffset}});
        {{nativKeyType}} leftKey = leftByteBuffer.get{{keyType}}();
        keys.add(leftKey);
        leftByteBuffer.reset();
        leftKeyToOffset.put(leftKey, leftByteBuffer.position());

        for ({{keyType}}Set rightKey : leftWindowToKeys) {
            writeOutput(leftByteBuffer.position(), rightKeyToOffset.get(rightKey));
        }

        leftByteBuffer.position(leftByteBuffer.position() + {{leftTupleLength}});

        if (leftByteBuffer.get() == (byte) 1) {
            latestTimestampLeft = Math.max(latestTimestampLeft, eventTimestamp);
            for (; earliestOpenWindowJoin + windowLength <= latestTimestampLeft && earliestOpenWindowJoin
                    + windowLength <= latestTimestampRight; earliestOpenWindowJoin += windowSlide) {
                trigger(earliestOpenWindowJoin);
            }
        }
    }

    public void readEventRight() {
        final long eventTimestamp = rightByteBuffer.getLong();
        rightByteBuffer.mark();
        if (eventTimestamp < latestTimestampRight) {
            return;
        }
        final long windowStart = eventTimestamp - (eventTimestamp % windowLength);
        if (earliestOpenWindowJoin > windowStart) {
            earliestOpenWindowJoin = windowStart;
        }

        {{{rightImplementation}}}
        
        {{keyType}}Set keys = rightWindowToKeys.computeIfAbsent(windowStart, w -> new {{keyType}}Set());
        rightByteBuffer.position(rightByteBuffer.position()+{{rightKeyOffset}});
        {{nativKeyType}} rightKey = rightByteBuffer.get{{keyType}}();
        keys.add(rightKey);
        rightByteBuffer.reset();
        rightKeyToOffset.put(leftKey, rightByteBuffer.position());

        for ({{keyType}}Set leftKey : rightWindowToKeys) {
            writeOutput(leftKeyToOffset.get(leftKey), rightByteBuffer.position());
        }

        leftByteBuffer.position(rightByteBuffer.position() + {{rightTupleLength}});        

        if (rightByteBuffer.get() == (byte) 1) {
            latestTimestampRight = Math.max(latestTimestampRight, eventTimestamp);
            for (; earliestOpenWindowJoin + windowLength <= latestTimestampLeft && earliestOpenWindowJoin
                    + windowLength <= latestTimestampRight; earliestOpenWindowJoin += windowSlide) {
                trigger(earliestOpenWindowJoin);
            }
        }
    }

    private void trigger(final long timeStamp) {
        rightWindowToKeys.remove(timeStamp);
        leftWindowToKeys.remove(timeStamp);
    }

    public void writeOutput(int leftOffset, int rightOffset) {
        leftByteBuffer.position(leftOffset);
        rightByteBuffer.position(rightOffset);
        byte[] out = new byte[8 + 2 + {{leftTupleLength}} + {{rightTupleLength}}];
        ByteBuffer b = ByteBuffer.wrap(out).putLong(count++);
        leftByteBuffer.get(out, 8, {{leftTupleLength}});
        rightByteBuffer.get(out, 8 + {{leftTupleLength}}, {{rightTupleLength}});
        b.putChar(8 + {{leftTupleLength}} + {{rightTupleLength}}, (char) 0);
        while (!dispatcher.write("{{pipelineId}}", out));
        dispatcher.free(leftInput, leftOffset - 8);
        dispatcher.free(rightInput, rightOffset - 8);
        leftByteBuffer.clear();
        rightByteBuffer.clear();
    }

    @Override
    public void run() {
        while (true) {
            if (leftByteBuffer.hasRemaining()) {
                readEventLeft();
            }
            if (rightByteBuffer.hasRemaining()) {
                readEventRight();
            }
            if (leftByteBuffer.position() == leftByteBuffer.capacity()) {
                dispatcher.resetLimit(leftInput);
            }
            if (rightByteBuffer.position() == rightByteBuffer.capacity()) {
                dispatcher.resetLimit(rightInput);
            }
        }
    }
}