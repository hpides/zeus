package de.hpi.des.hdes.engine.temp;

import java.util.HashMap;

import org.jooq.lambda.tuple.*;

import java.util.HashMap;
import java.util.function.*;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

import de.hpi.des.hdes.engine.execution.slot.Event;
import de.hpi.des.hdes.engine.generators.TempSink;

public class {{{className}}} {

    private final {{{nextClassName}}} nextPipeline;
    private final HashMap<Long, Multimap<Object, Object>> stateLeft;
    private final HashMap<Long, Multimap<Object, Object>> stateRight;
    private final long length = {{{length}}};
    private final long slide = {{{slide}}};

    private long earliestOpenWindowJoin = Long.MAX_VALUE;
    private long latestTimestampLeft;
    private long latestTimestampRight;

    public {{{className}}}(final {{{nextClassName}}} nextPipeline) {
        this.nextPipeline = nextPipeline;
        this.stateLeft = new HashMap<>();
        this.stateRight = new HashMap<>();
        this.latestTimestampLeft = 0;
        this.latestTimestampRight = 0;
    }

    public void joinLeftPipeline(final Event event) {
        final long eventTimestamp = event.getTimestamp();
        latestTimestampLeft = Math.max(latestTimestampLeft, eventTimestamp);
        long windowStart = eventTimestamp - (eventTimestamp % length);
        if (earliestOpenWindowJoin > windowStart) {
            earliestOpenWindowJoin = windowStart;
        }

        {{{leftImplementation}}}

        for (; earliestOpenWindowJoin + length <= latestTimestampLeft
                && earliestOpenWindowJoin + length <= latestTimestampRight; earliestOpenWindowJoin += slide) {
            if (stateLeft.containsKey(earliestOpenWindowJoin)) {
                stateLeft.remove(earliestOpenWindowJoin);
            }
            if (stateRight.containsKey(earliestOpenWindowJoin)) {
                stateRight.remove(earliestOpenWindowJoin);
            }
        }
    }

    public void joinRightPipeline(final Event event) {
        final long eventTimestamp = event.getTimestamp();
        latestTimestampRight = Math.max(latestTimestampRight, event.getTimestamp());
        long windowStart =eventTimestamp - (eventTimestamp % length);
        if (earliestOpenWindowJoin > windowStart) {
            earliestOpenWindowJoin = windowStart;
        }

        {{{rightImplementation}}}

        for (; earliestOpenWindowJoin + length <= latestTimestampLeft
                && earliestOpenWindowJoin + length <= latestTimestampRight; earliestOpenWindowJoin += slide) {
            if (stateLeft.containsKey(earliestOpenWindowJoin)) {
                stateLeft.remove(earliestOpenWindowJoin);
            }
            if (stateRight.containsKey(earliestOpenWindowJoin)) {
                stateRight.remove(earliestOpenWindowJoin);
            }
        }
    }
}
